# Copyright Â© 2023 Apple Inc.

"""Summary objects that can be logged."""
from typing import Any, Callable, Dict, Optional, Tuple, Union

import jax
import numpy as np
from flax import struct

from axlearn.common.utils import NestedTensor, Tensor


# Inheriting from struct.PytreeNode makes this and its subclasses a Flax struct, which is a
# dataclass that is automatically registered as a PyTree and supports control of what data
# is part of the dynamic (visible to JIT) values and what data is part of the
# static auxiliary data.
class Summary(struct.PyTreeNode):
    """Base class for a summary value.

    Subclasses should implement value() and, optionally, validate().
    """

    def __post_init__(self):
        # Work around jax bug in PJIT where they sometimes indiscriminately instantiate
        # pytrees with object() field values even if it's not valid.
        # There is a comment in the jax source indicating that this will be fixed eventually.
        # https://github.com/google/jax/blob/b81a3e1fd774ebdbc3015f1bc977bfacb5d4b745/jax/_src/pjit.py#L935-L938
        leaves, _ = jax.tree_util.tree_flatten(self)
        # pylint: disable-next=unidiomatic-typecheck
        if not all(type(leaf) == object for leaf in leaves):
            self.validate()

    def value(self) -> Optional[Union[NestedTensor, int, float]]:
        """Returns a value for logging."""
        raise NotImplementedError()

    def validate(self):
        """Validates that the summary was constructed with valid data. This is automatically
        called during __post_init__().

        Raises:
            Exception: If the summary is invalid.
        """


class ImageSummary(Summary):
    """A summary that should be logged as a batch of images.

    The shape should either be (batch, height, width, channels)  or (batch, height, width).

    Supported channels values are 1 for grayscale, 3 for RGB, and 4 for RGBA.

    The image returned by `value()` will be padded to `ndim==4` if this was instantiated with a
    tensor with `ndim==3`.
    """

    _value: Tensor

    def validate(self):
        val = self._value
        if val.ndim not in (3, 4):
            raise ValueError(
                f"ImageSummary value has invalid shape:\n"
                f"expected val.ndim in (3, 4), got {val.ndim}"
            )
        if val.ndim == 4 and val.shape[-1] not in (1, 3, 4):
            raise ValueError(
                f"ImageSummary value has invalid shape:\n"
                f"expected channels (val.shape[-1]) in (1, 3, 4), got {val.shape[-1]}"
            )

    def value(self) -> Tensor:
        # Add dimension representing 1 grayscale channel if the image is grayscale.
        val = self._value
        if val.ndim == 3:
            val = val[..., None]
        return val


class CallbackSummary(Summary):
    # pylint: disable=not-callable,super-init-not-called
    """A summary defined using a callback that is only called outside of JIT. The arguments
    to the callback are treated as pytrees whose leaves are converted to numpy arrays before
    calling the callback.

    Example:
        ```
        # This logs a 7 row table with two columns where each cell contains a 16 x 16 color image
        # Shape: num examples x table columns x image height x image width x channels
        images = jax.numpy.ones((7, 2, 16, 16, 3))

        def create_table(images: np.ndarray):
            return wandb.Table(
                ["output", "target"], [[wandb.Image(img) for img in row] for row in images]
            )

        add_summary("my_summary", CallbackSummary(create_table, images))
        ```
    """

    fn: Callable = struct.field(pytree_node=False)
    args: Tuple
    kwargs: Dict[str, Any]

    def __init__(self, fn: Callable, *args, **kwargs):
        """Initializes the class.

        This sets self.fn=fn, self.args=args, self.kwargs=kwargs.
        If kwargs with the names 'args' or 'kwargs' are present, the values of self.args or
        self.kwargs will be set using those values instead.

        Args:
            fn: The function to call with the given arguments that should return an object that
                is compatible with WandB's logger.
            *args: The positional arguments to pass to fn. JAX arrays will be converted to Numpy.
            **kwargs: The keyword arguments to pass to fn. JAX arrays will be converted to Numpy.
        """
        # The tree flattening and unflattening methods generated by the PyTreeNode superclass
        # expect that the class can be constructed using its members as keyword arguments.
        # Therefore, we need to support constructing this class using "args" and "kwargs"
        # as keyword arguments.
        # __setattr__ is the only way to initialize a frozen dataclass's fields.
        super().__setattr__("fn", fn)
        if "args" in kwargs:
            super().__setattr__("args", kwargs["args"])
        else:
            super().__setattr__("args", args)
        if "kwargs" in kwargs:
            super().__setattr__("kwargs", kwargs["kwargs"])
        else:
            super().__setattr__("kwargs", kwargs)

    def value(self) -> Tensor:
        args = tuple(np.asarray(x) for x in self.args)
        kwargs = jax.tree_util.tree_map(
            lambda x: np.asarray(x) if isinstance(x, Tensor) else x, self.kwargs
        )
        return self.fn(*args, **kwargs)
