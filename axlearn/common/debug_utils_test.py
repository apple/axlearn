"""Tests for debug_utils.py"""

import jax
import jax.numpy as jnp
from jax.experimental import checkify

from axlearn.common import test_utils
from axlearn.common.debug_utils import checkify_pjit


class TestPjitWrappers(test_utils.TestCase):
    """Tests for functions that produce `JitFn` wrappers."""

    def setUp(self):
        super().setUp()
        self.enter_context(jax.checking_leaks())

    def test_checkify_pjit(self):
        """Tests `checkify_pjit` in "JIT" mode."""
        wrapped_pjit = checkify_pjit(errors=checkify.float_checks)

        @wrapped_pjit
        def fn(x, y):
            return x / y

        self.assertNestedAllClose(fn(8, 2), 4.0, atol=0, rtol=1e-6)
        with self.assertRaisesRegex(checkify.JaxRuntimeError, "division by zero"):
            fn(6, 0)

    def test_checkify_pjit_compiled(self):
        """Tests `checkify_pjit` in "ahead-of-time ompiled" mode."""
        wrapped_pjit = checkify_pjit(errors=checkify.nan_checks)

        @wrapped_pjit
        def fn(x):
            return jnp.log(x)

        compiled_fn = fn.lower(1.0).compile()
        self.assertNestedAllClose(compiled_fn(jnp.exp(1.0)), 1.0, atol=0, rtol=1e-6)
        with self.assertRaisesRegex(checkify.JaxRuntimeError, "nan generated by primitive: log."):
            compiled_fn(-1.0)
