batch_axis_names[0]: 'data'
batch_axis_names[1]: 'expert'
batch_axis_names[2]: 'fsdp'
batch_axis_names[3]: 'seq'
checkpointer.gc_loop_interval_seconds: 60
checkpointer.keep_every_n_steps: 5000
checkpointer.keep_last_n: 3
checkpointer.klass: 'axlearn.common.checkpointer.Checkpointer'
checkpointer.save_policy.fn: 'axlearn.common.checkpointer.every_n_steps_and_last_policy'
checkpointer.save_policy.max_step: 750000
checkpointer.save_policy.min_step: 1
checkpointer.save_policy.n: 5000
checkpointer.storage.klass: 'axlearn.common.checkpointer.TensorStoreStateStorage'
checkpointer.storage.timeout_secs: 3600
evalers['openwebtext_2'].eval_dtype: 'jax.numpy.bfloat16'
evalers['openwebtext_2'].eval_policy.fn: 'axlearn.common.evaler.every_n_steps_policy'
evalers['openwebtext_2'].eval_policy.max_step: 750000
evalers['openwebtext_2'].eval_policy.min_step: 1
evalers['openwebtext_2'].eval_policy.n: 25000
evalers['openwebtext_2'].input.batcher.fn: 'axlearn.common.input_tf_data.batch'
evalers['openwebtext_2'].input.batcher.global_batch_size: 2048
evalers['openwebtext_2'].input.batcher.pad_example_fn: 'axlearn.common.input_tf_data.default_pad_example_fn'
evalers['openwebtext_2'].input.batcher.prefetch_buffer_size: -1
evalers['openwebtext_2'].input.is_training: False
evalers['openwebtext_2'].input.klass: 'axlearn.common.input_tf_data.Input'
evalers['openwebtext_2'].input.processor.fn: 'axlearn.common.input_tf_data.identity'
evalers['openwebtext_2'].input.source.dataset_name: 'pile/openwebtext_2:1.0.0'
evalers['openwebtext_2'].input.source.fn: 'axlearn.experiments.text.gpt.common.tfds_input'
evalers['openwebtext_2'].input.source.is_training: False
evalers['openwebtext_2'].input.source.max_sequence_length: 4096
evalers['openwebtext_2'].input.source.replace_newlines_with: '<n>'
evalers['openwebtext_2'].input.source.split: 'test[:5000]'
evalers['openwebtext_2'].input.source.train_shuffle_buffer_size: 16384
evalers['openwebtext_2'].input.source.vocab_cfg.fn: 'axlearn.experiments.text.common.vocab'
evalers['openwebtext_2'].input.source.vocab_cfg.sentencepiece_model_name: 'bpe_48k_honeycrisp.model'
evalers['openwebtext_2'].klass: 'axlearn.common.evaler.SpmdEvaler'
evalers['openwebtext_2'].metric_calculator.klass: 'axlearn.common.evaler.ModelSummaryAccumulator'
evalers['openwebtext_2'].metric_calculator.metric_accumulator.klass: 'axlearn.common.metrics.MetricAccumulator'
evalers['openwebtext_2'].metric_calculator.model_method: 'forward'
evalers['openwebtext_2'].summary_writer.klass: 'axlearn.common.summary_writer.SummaryWriter'
evalers['openwebtext_2'].summary_writer.write_every_n_steps: 1
input.batcher.fn: 'axlearn.common.input_tf_data.batch'
input.batcher.global_batch_size: 2048
input.batcher.pad_example_fn: 'axlearn.common.input_tf_data.default_pad_example_fn'
input.batcher.prefetch_buffer_size: -1
input.is_training: True
input.klass: 'axlearn.common.input_tf_data.Input'
input.processor.fn: 'axlearn.common.input_tf_data.identity'
input.source.dataset_name: 'pajama_honeycrisp_15t_202408072230'
input.source.download: False
input.source.fn: 'axlearn.common.input_tf_data.tfds_dataset'
input.source.is_training: True
input.source.split: 'train'
input.source.train_shuffle_buffer_size: 0
input.source.train_shuffle_files: False
klass: 'axlearn.common.trainer.SpmdTrainer'
learner.ema.fn: 'axlearn.common.optimizers.param_ema'
learner.enable_per_variable_summaries: False
learner.klass: 'axlearn.common.learner.Learner'
learner.optimizer.drop_norm: 100
learner.optimizer.eps: 1e-08
learner.optimizer.fn: 'axlearn.common.optimizers.skip_and_clip_by_global_norm'
learner.optimizer.inner.adam_update_transformation.fn: 'axlearn.common.optimizers.scale_update_per_param'
learner.optimizer.inner.adam_update_transformation.per_param_scale.default_scale: 1.0
learner.optimizer.inner.adam_update_transformation.per_param_scale.description: 'scale_by_mup_simple'
learner.optimizer.inner.adam_update_transformation.per_param_scale.fn: 'axlearn.common.optimizers.per_param_scale_by_path'
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[0][0]: '.*attention/o_proj/weight'
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[0][1]: 0.25
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[1][0]: '.*attention/i_proj/i_proj/qkv_proj/weight'
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[1][1]: 0.25
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[2][0]: '.*feed_forward/linear1_0/weight'
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[2][1]: 0.25
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[3][0]: '.*feed_forward/linear1_1/weight'
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[3][1]: 0.25
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[4][0]: '.*feed_forward/linear2/weight'
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[4][1]: 0.25
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[5][0]: '.*feed_forward/wi_0_weight'
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[5][1]: 0.25
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[6][0]: '.*feed_forward/wi_1_weight'
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[6][1]: 0.25
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[7][0]: '.*feed_forward/wo_weight'
learner.optimizer.inner.adam_update_transformation.per_param_scale.scale_by_path[7][1]: 0.25
learner.optimizer.inner.eps: 0
learner.optimizer.inner.eps_square: 1e-30
learner.optimizer.inner.fn: 'axlearn.common.optimizers.adastar_optimizer'
learner.optimizer.inner.gradient_ema_debias: None
learner.optimizer.inner.gradient_ema_decay: None
learner.optimizer.inner.gradient_square_ema_debias: True
learner.optimizer.inner.gradient_square_ema_decay: 0.95
learner.optimizer.inner.learning_rate: 0.01
learner.optimizer.inner.raw_update_clipping_threshold: 1.0
learner.optimizer.inner.update_ema_debias: False
learner.optimizer.inner.update_ema_decay: 0.95
learner.optimizer.inner.update_schedule.alpha: 0.005
learner.optimizer.inner.update_schedule.begin_value: 0.0
learner.optimizer.inner.update_schedule.fn: 'axlearn.common.schedule.cosine_with_linear_warmup'
learner.optimizer.inner.update_schedule.max_step: 750000
learner.optimizer.inner.update_schedule.peak_lr: 1.0
learner.optimizer.inner.update_schedule.warmup_steps: 5000
learner.optimizer.inner.verbosity: 0
learner.optimizer.inner.weight_decay: 0.000316
learner.optimizer.max_norm: 1
max_step: 750000
mesh_axis_names[0]: 'pipeline'
mesh_axis_names[1]: 'data'
mesh_axis_names[2]: 'expert'
mesh_axis_names[3]: 'fsdp'
mesh_axis_names[4]: 'seq'
mesh_axis_names[5]: 'model'
mesh_rules[0][0]: 'tpu-v4-256'
mesh_rules[0][1][0]: 1
mesh_rules[0][1][1]: 1
mesh_rules[0][1][2]: 1
mesh_rules[0][1][3]: -1
mesh_rules[0][1][4]: 1
mesh_rules[0][1][5]: 1
mesh_rules[1][0]: 'tpu-v5litepod-256'
mesh_rules[1][1][0]: 1
mesh_rules[1][1][1]: -1
mesh_rules[1][1][2]: 1
mesh_rules[1][1][3]: 256
mesh_rules[1][1][4]: 1
mesh_rules[1][1][5]: 1
mesh_rules[2][0]: 'gpu-(p5.48xlarge|p4de.24xlarge|a3-highgpu-8g)-(64|128|256|512|1024)'
mesh_rules[2][1][0]: 1
mesh_rules[2][1][1]: -1
mesh_rules[2][1][2]: 1
mesh_rules[2][1][3]: 8
mesh_rules[2][1][4]: 1
mesh_rules[2][1][5]: 1
mesh_rules[3][0]: 'gpu-p4d.24xlarge-256'
mesh_rules[3][1][0]: 1
mesh_rules[3][1][1]: -1
mesh_rules[3][1][2]: 1
mesh_rules[3][1][3]: 8
mesh_rules[3][1][4]: 1
mesh_rules[3][1][5]: 1
mesh_rules[4][0]: 'tpu-v5p-(1024|2048|4096)'
mesh_rules[4][1][0]: 1
mesh_rules[4][1][1]: -1
mesh_rules[4][1][2]: 1
mesh_rules[4][1][3]: 1
mesh_rules[4][1][4]: 1
mesh_rules[4][1][5]: 1
mesh_shape[0]: 1
mesh_shape[1]: -1
mesh_shape[2]: 1
mesh_shape[3]: 8
mesh_shape[4]: 1
mesh_shape[5]: 1
model.batch_axis_names[0]: 'data'
model.batch_axis_names[1]: 'expert'
model.batch_axis_names[2]: 'fsdp'
model.decoder.attention_mask: None
model.decoder.decoding.klass: 'axlearn.common.decoder.DecodingLayer'
model.decoder.dim: 3072
model.decoder.dropout_rate: 0.0
model.decoder.emb.dropout.klass: 'axlearn.common.layers.Dropout'
model.decoder.emb.klass: 'axlearn.common.embedding.TransformerTextEmbeddings'
model.decoder.emb.token_emb.klass: 'axlearn.common.layers.Embedding'
model.decoder.emb.token_emb.param_init.init_by_param_name['.*weight$'].distribution: 'normal'
model.decoder.emb.token_emb.param_init.init_by_param_name['.*weight$'].fan: 'fan_out'
model.decoder.emb.token_emb.param_init.init_by_param_name['.*weight$'].klass: 'axlearn.common.param_init.WeightInitializer'
model.decoder.emb.token_emb.param_init.init_by_param_name['.*weight$'].scale: 1.0
model.decoder.emb.token_emb.param_init.klass: 'axlearn.common.param_init.DefaultInitializer'
model.decoder.emb.token_emb.param_partition_spec[0][0]: 'expert'
model.decoder.emb.token_emb.param_partition_spec[0][1]: 'fsdp'
model.decoder.emb.token_emb.param_partition_spec[0][2]: 'seq'
model.decoder.emb.token_emb.param_partition_spec[1]: 'model'
model.decoder.eos_token_id: 1
model.decoder.klass: 'axlearn.common.decoder.Decoder'
model.decoder.logits_partition_spec[0][0]: 'data'
model.decoder.logits_partition_spec[0][1]: 'expert'
model.decoder.logits_partition_spec[0][2]: 'fsdp'
model.decoder.logits_partition_spec[1]: 'seq'
model.decoder.logits_partition_spec[2]: 'model'
model.decoder.output_dropout.klass: 'axlearn.common.layers.Dropout'
model.decoder.output_norm.eps: 1e-05
model.decoder.output_norm.forward_dtype: None
model.decoder.output_norm.klass: 'axlearn.common.layers.RMSNorm'
model.decoder.pad_token_id: 0
model.decoder.transformer.klass: 'axlearn.common.attention.RepeatedTransformerLayer'
model.decoder.transformer.layer.feed_forward.activation[0]: 'nn.silu'
model.decoder.transformer.layer.feed_forward.activation[1]: 'linear'
model.decoder.transformer.layer.feed_forward.add_dead_neuron_summary: True
model.decoder.transformer.layer.feed_forward.add_value_rms_norm_summary[0]: 'linear2_outputs'
model.decoder.transformer.layer.feed_forward.dropout.klass: 'axlearn.common.layers.Dropout'
model.decoder.transformer.layer.feed_forward.hidden_dim: 8064
model.decoder.transformer.layer.feed_forward.klass: 'axlearn.common.attention.TransformerFeedForwardLayer'
model.decoder.transformer.layer.feed_forward.linear1.bias: False
model.decoder.transformer.layer.feed_forward.linear1.klass: 'axlearn.common.layers.Linear'
model.decoder.transformer.layer.feed_forward.linear1.output_partition_spec[0][0]: 'data'
model.decoder.transformer.layer.feed_forward.linear1.output_partition_spec[0][1]: 'expert'
model.decoder.transformer.layer.feed_forward.linear1.output_partition_spec[0][2]: 'fsdp'
model.decoder.transformer.layer.feed_forward.linear1.output_partition_spec[1]: 'seq'
model.decoder.transformer.layer.feed_forward.linear1.output_partition_spec[2]: 'model'
model.decoder.transformer.layer.feed_forward.linear1.param_partition_spec[0][0]: 'expert'
model.decoder.transformer.layer.feed_forward.linear1.param_partition_spec[0][1]: 'fsdp'
model.decoder.transformer.layer.feed_forward.linear1.param_partition_spec[0][2]: 'seq'
model.decoder.transformer.layer.feed_forward.linear1.param_partition_spec[1]: 'model'
model.decoder.transformer.layer.feed_forward.linear2.bias: False
model.decoder.transformer.layer.feed_forward.linear2.klass: 'axlearn.common.layers.Linear'
model.decoder.transformer.layer.feed_forward.linear2.output_partition_spec[0][0]: 'data'
model.decoder.transformer.layer.feed_forward.linear2.output_partition_spec[0][1]: 'expert'
model.decoder.transformer.layer.feed_forward.linear2.output_partition_spec[0][2]: 'fsdp'
model.decoder.transformer.layer.feed_forward.linear2.output_partition_spec[1]: 'seq'
model.decoder.transformer.layer.feed_forward.linear2.output_partition_spec[2]: 'model'
model.decoder.transformer.layer.feed_forward.linear2.param_partition_spec[0]: 'model'
model.decoder.transformer.layer.feed_forward.linear2.param_partition_spec[1][0]: 'expert'
model.decoder.transformer.layer.feed_forward.linear2.param_partition_spec[1][1]: 'fsdp'
model.decoder.transformer.layer.feed_forward.linear2.param_partition_spec[1][2]: 'seq'
model.decoder.transformer.layer.feed_forward.norm.eps: 1e-05
model.decoder.transformer.layer.feed_forward.norm.forward_dtype: None
model.decoder.transformer.layer.feed_forward.norm.klass: 'axlearn.common.layers.RMSNorm'
model.decoder.transformer.layer.feed_forward.residual_weight: 1.0
model.decoder.transformer.layer.feed_forward.stochastic_depth.klass: 'axlearn.common.layers.StochasticDepth'
model.decoder.transformer.layer.feed_forward.stochastic_depth.mode: 'row'
model.decoder.transformer.layer.feed_forward.structure: 'prenorm'
model.decoder.transformer.layer.klass: 'axlearn.common.attention.TransformerLayer'
model.decoder.transformer.layer.remat_spec['prevent_cse']: False
model.decoder.transformer.layer.remat_spec['policy'].fn: 'axlearn.common.attention._save_and_offload_only_these_names_regex'
model.decoder.transformer.layer.remat_spec['policy'].names_which_can_be_offloaded: None
model.decoder.transformer.layer.remat_spec['policy'].names_which_can_be_saved: '.*([qkvo]_proj|context)'
model.decoder.transformer.layer.remat_spec['policy'].offload_dst: 'pinned_host'
model.decoder.transformer.layer.remat_spec['policy'].offload_src: 'device'
model.decoder.transformer.layer.self_attention.attention.causal: True
model.decoder.transformer.layer.self_attention.attention.dropout.klass: 'axlearn.common.layers.Dropout'
model.decoder.transformer.layer.self_attention.attention.input_linear.cache_dtype: 'jax.numpy.bfloat16'
model.decoder.transformer.layer.self_attention.attention.input_linear.input_linear.cache_dtype: 'jax.numpy.bfloat16'
model.decoder.transformer.layer.self_attention.attention.input_linear.input_linear.klass: 'axlearn.common.attention.FusedGroupedQKVLinear'
model.decoder.transformer.layer.self_attention.attention.input_linear.input_linear.layer.bias: False
model.decoder.transformer.layer.self_attention.attention.input_linear.input_linear.layer.klass: 'axlearn.common.attention.MultiheadInputLinear'
model.decoder.transformer.layer.self_attention.attention.input_linear.input_linear.layer.param_partition_spec[0][0]: 'expert'
model.decoder.transformer.layer.self_attention.attention.input_linear.input_linear.layer.param_partition_spec[0][1]: 'fsdp'
model.decoder.transformer.layer.self_attention.attention.input_linear.input_linear.layer.param_partition_spec[0][2]: 'seq'
model.decoder.transformer.layer.self_attention.attention.input_linear.input_linear.layer.param_partition_spec[1]: 'model'
model.decoder.transformer.layer.self_attention.attention.input_linear.input_linear.layer.param_partition_spec[2]: None
model.decoder.transformer.layer.self_attention.attention.input_linear.input_linear.num_kv_heads: 8
model.decoder.transformer.layer.self_attention.attention.input_linear.klass: 'axlearn.common.attention.RoFormerQKVLinear'
model.decoder.transformer.layer.self_attention.attention.input_linear.rope_pos_emb_layer.klass: 'axlearn.common.attention.RoFormerSinusoidalPositionalEmbedding'
model.decoder.transformer.layer.self_attention.attention.input_linear.rope_pos_emb_layer.theta: 500000.0
model.decoder.transformer.layer.self_attention.attention.input_linear.rotary_value: False
model.decoder.transformer.layer.self_attention.attention.key_scale.klass: 'axlearn.common.attention.ScaleKey'
model.decoder.transformer.layer.self_attention.attention.key_scale.norm.eps: 1e-05
model.decoder.transformer.layer.self_attention.attention.key_scale.norm.forward_dtype: None
model.decoder.transformer.layer.self_attention.attention.key_scale.norm.klass: 'axlearn.common.layers.RMSNorm'
model.decoder.transformer.layer.self_attention.attention.klass: 'axlearn.common.attention.GroupedQueryAttention'
model.decoder.transformer.layer.self_attention.attention.num_heads: 24
model.decoder.transformer.layer.self_attention.attention.output_linear.bias: False
model.decoder.transformer.layer.self_attention.attention.output_linear.klass: 'axlearn.common.attention.MultiheadOutputLinear'
model.decoder.transformer.layer.self_attention.attention.output_linear.param_partition_spec[0][0]: 'expert'
model.decoder.transformer.layer.self_attention.attention.output_linear.param_partition_spec[0][1]: 'fsdp'
model.decoder.transformer.layer.self_attention.attention.output_linear.param_partition_spec[0][2]: 'seq'
model.decoder.transformer.layer.self_attention.attention.output_linear.param_partition_spec[1]: 'model'
model.decoder.transformer.layer.self_attention.attention.output_linear.param_partition_spec[2]: None
model.decoder.transformer.layer.self_attention.attention.query_scale.klass: 'axlearn.common.attention.ScaleQuery'
model.decoder.transformer.layer.self_attention.attention.query_scale.norm.eps: 1e-05
model.decoder.transformer.layer.self_attention.attention.query_scale.norm.forward_dtype: None
model.decoder.transformer.layer.self_attention.attention.query_scale.norm.klass: 'axlearn.common.layers.RMSNorm'
model.decoder.transformer.layer.self_attention.dropout.klass: 'axlearn.common.layers.Dropout'
model.decoder.transformer.layer.self_attention.klass: 'axlearn.common.attention.TransformerAttentionLayer'
model.decoder.transformer.layer.self_attention.norm.eps: 1e-05
model.decoder.transformer.layer.self_attention.norm.forward_dtype: None
model.decoder.transformer.layer.self_attention.norm.klass: 'axlearn.common.layers.RMSNorm'
model.decoder.transformer.layer.self_attention.stochastic_depth.klass: 'axlearn.common.layers.StochasticDepth'
model.decoder.transformer.layer.self_attention.stochastic_depth.mode: 'row'
model.decoder.transformer.layer.self_attention.structure: 'prenorm'
model.decoder.transformer.num_layers: 26
model.decoder.transformer.repeat.drop_output.fn: 'axlearn.common.repeat._drop_by_regex'
model.decoder.transformer.repeat.drop_output.rules[0]: 'module_outputs.*'
model.decoder.transformer.repeat.klass: 'axlearn.common.attention._TransformerRepeat'
model.decoder.vocab_size: 49152
model.dtype: 'jax.numpy.float32'
model.klass: 'axlearn.common.causal_lm.Model'
model.param_init.init_by_param_name['.*weight$'].distribution: 'normal'
model.param_init.init_by_param_name['.*weight$'].fan: 'fan_in'
model.param_init.init_by_param_name['.*weight$'].klass: 'axlearn.common.param_init.WeightInitializer'
model.param_init.init_by_param_name['.*weight$'].scale: 1.0
model.param_init.klass: 'axlearn.common.param_init.DefaultInitializer'
model.seq_axis_names[0]: 'seq'
model.z_loss_scale: 1e-06
name: 'gpt_trainer'
prune_empty_state_updates: True
save_input_iterator: True
start_trace_process_indices[0]: 0
summary_writer.klass: 'axlearn.common.summary_writer.SummaryWriter'
summary_writer.max_queue: 1000
summary_writer.write_every_n_steps: 100
train_dtype: 'jax.numpy.bfloat16'